Kafka Structs, Interfaces, and Their Connections
================================================

This document explains each struct and interface in the Kafka backend (interfaces.go and client.go), and how they are connected and used.

---

1. KafkaService (interface)
--------------------------
**Location:** interfaces.go
**Purpose:** Defines the contract for all Kafka operations. Any struct implementing this interface can be used as a Kafka service in the application.
**Methods:**
- CheckConnection() error
- ListTopics() ([]Topic, error)
- CreateTopic(name string, partitions, replicationFactor int) error
- DeleteTopic(topic string) error
- GetPartitionInfo(topic string) ([]PartitionInfo, error)
- ClearTopicMessages(topic string) error
- FetchMessages(topic string, limit int, sortOrder string) ([]Message, error)
- Produce(topic, key string, value []byte, partition int32, headers []MessageHeader) error
- GetBrokers() ([]BrokerInfo, error)
- GetConsumers() ([]ConsumerGroupInfo, error)
**Connection:** Implemented by the `Client` struct in client.go.

---

2. Client (struct)
------------------
**Location:** client.go
**Purpose:** Implements KafkaService using the Sarama library. Handles all Kafka operations (topics, messages, brokers, consumers).
**Fields:**
- brokers []string: List of Kafka broker addresses
- config *sarama.Config: Sarama configuration
- client sarama.Client: Sarama client instance
- admin sarama.ClusterAdmin: Sarama admin instance
**Connection:** Implements all methods of KafkaService. Created via NewClient/NewKafkaClient. Used by the backend to interact with Kafka.

---

3. Message (struct)
-------------------
**Location:** interfaces.go
**Purpose:** Represents a Kafka message, including metadata and headers.
**Fields:**
- Topic string
- Partition int32
- Offset int64
- Key string
- Value string
- Timestamp int64
- Headers []MessageHeader
- Size int
**Connection:** Used in FetchMessages, Produce, and related methods in Client.

---

4. MessageHeader (struct)
-------------------------
**Location:** interfaces.go
**Purpose:** Represents a key-value pair header for a Kafka message.
**Fields:**
- Key string
- Value string
**Connection:** Used in Message struct and in message production/consumption.

---

5. PartitionInfo (struct)
-------------------------
**Location:** interfaces.go
**Purpose:** Information about a Kafka partition.
**Fields:**
- Topic string
- Partition int32
- Leader int32
- Replicas []int32
- InSyncReplicas []int32
**Connection:** Returned by GetPartitionInfo in Client.

---

6. Broker (struct) / BrokerInfo (alias)
---------------------------------------
**Location:** interfaces.go
**Purpose:** Represents a Kafka broker and its metadata.
**Fields:**
- ID int32
- Host string
- Port int32
- Address string
- Status string
- SegmentCount int
- Replicas []int
- Leaders []int
**Connection:** Used in GetBrokers in Client. BrokerInfo is an alias for Broker for compatibility.

---

7. ConsumerGroup (struct) / ConsumerGroupInfo (alias)
-----------------------------------------------------
**Location:** interfaces.go
**Purpose:** Represents a Kafka consumer group and its metadata.
**Fields:**
- GroupID string
- MemberID string
- Topics []string
- Partitions []int32
- Error string
**Connection:** Used in GetConsumers in Client. ConsumerGroupInfo is an alias for ConsumerGroup for compatibility.

---

8. Topic (struct)
-----------------
**Location:** interfaces.go
**Purpose:** Represents a Kafka topic, including partitions and consumer groups.
**Fields:**
- Name string
- Partitions []Partition
- ConsumerGroups []ConsumerGroup
- Internal bool
- PartitionCount int
- ReplicationFactor int
**Connection:** Used in ListTopics and topic-related methods in Client.

---

9. Partition (struct)
---------------------
**Location:** interfaces.go
**Purpose:** Represents a Kafka topic partition and its metadata.
**Fields:**
- ID int
- Leader int
- Replicas []int
- InSyncReplicas []int
- OfflineReplicas []int
**Connection:** Used in Topic struct and in partition-related methods in Client.

---

How They Connect
================
- The `Client` struct implements the `KafkaService` interface, providing all Kafka operations.
- The backend uses `Client` (as a KafkaService) to interact with Kafka clusters.
- Data structures like `Message`, `Topic`, `Partition`, `Broker`, and `ConsumerGroup` are used as return types or parameters for these operations, representing Kafka entities in Go.
- The Sarama library is used internally by `Client` to perform all actual Kafka operations.

---

**Flow Example:**
- Backend creates a `Client` using `NewClient` (passing broker addresses and config).
- The backend calls methods like `ListTopics`, `Produce`, `FetchMessages` on the `Client` (as KafkaService).
- These methods use Sarama to interact with Kafka, and return Go structs (Message, Topic, etc.) to the backend, which are then sent to the frontend or used internally.

---

**Summary Table**
| Struct/Interface      | Purpose/Role                        | Used By/Returned From           |
|----------------------|-------------------------------------|---------------------------------|
| KafkaService         | Interface for all Kafka operations   | Implemented by Client           |
| Client               | Main Kafka handler (Sarama-based)   | Used by backend                 |
| Message              | Kafka message representation         | FetchMessages, Produce          |
| MessageHeader        | Kafka message header                 | In Message, Produce             |
| PartitionInfo        | Partition info                       | GetPartitionInfo                |
| Broker/BrokerInfo    | Broker metadata                     | GetBrokers                      |
| ConsumerGroup/Info   | Consumer group metadata              | GetConsumers                    |
| Topic                | Topic metadata                      | ListTopics, topic methods       |
| Partition            | Partition metadata                  | In Topic, partition methods     |
